# -*- coding: utf-8 -*-
"""mod2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LhjInsPXW93Ea9l7BdkVRYtdXILaFHAI
"""

import matplotlib.pyplot as plt
import pandas as pd
import networkx as nx
from itertools import count

g = nx.Graph()

df = pd.read_csv("tornadocsv.csv")
grouped_cells = df.groupby('CELL_ID')

for cell_id, location in grouped_cells:
    stations = location['WSR_ID'].values
    for station_id in stations:
        g.add_node(station_id)

    i = 0
    for left_station_id in stations:
        for right_station_id in stations [i+1:]:
          if left_station_id != right_station_id:
                g.add_edge(left_station_id, right_station_id, cell_id=cell_id)
        i += 1

degree_centrality=nx.degree_centrality(g)
sorted_degree_centrality = sorted(degree_centrality.items(), key=lambda x: x[1], reverse=True)

top_5_stations = [station_id for station_id, centrality in sorted_degree_centrality[:5]]
bottom_5_stations = [station_id for station_id, centrality in sorted_degree_centrality[-5:]]

for station in g.nodes():
    if station in top_5_stations:
      g.nodes[station]['grouping'] = 'top5'
    elif station in bottom_5_stations:
      g.nodes[station]['grouping'] = 'bottom5'
    else:
      g.nodes[station]['grouping'] = 'other'

plt.figure(figsize=(15, 8))
pos = nx.kamada_kawai_layout(g) #used kamada_kawai b/c it clustered the top 5 important nodes

# see read me for grouping code credit
groups = set(nx.get_node_attributes(g, 'grouping').values())
mapping = dict(zip(sorted(groups), count()))
nodes = g.nodes()
colors = [mapping[g.nodes[n]['grouping']] for n in nodes]
nx.draw_networkx_edges(g, pos, width=0.02, alpha=0.5)
nx.draw_networkx_nodes(g, pos, nodelist=nodes, node_color=colors, node_size=9, cmap=plt.cm.viridis)

top_5_labels = {station: station for station in top_5_stations}
nx.draw_networkx_labels(g, pos, labels=top_5_labels, font_size=9, font_color="black")

plt.title("Which weather stations are most likely to detect tornadoes across multiple regions?")
plt.show()